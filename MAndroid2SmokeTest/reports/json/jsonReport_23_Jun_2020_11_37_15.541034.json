{"created": 1592876350.3346813, "duration": 113.29751873016357, "exitcode": 1, "root": "C:\\Work\\Projects\\Python-Practice", "environment": {"Python": "3.7.1", "Platform": "Windows-10-10.0.18362-SP0", "Packages": {"pytest": "5.3.4", "py": "1.8.1", "pluggy": "0.13.1"}, "Plugins": {"allure-pytest": "2.8.7", "html": "2.1.1", "json-report": "1.2.1", "metadata": "1.8.0", "reportportal": "5.0.0"}, "JAVA_HOME": "C:\\Program Files\\Java\\jdk1.8.0_162"}, "summary": {"failed": 4, "total": 4, "collected": 4}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "type": "Module"}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment0]", "type": "Function", "lineno": 175}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment1]", "type": "Function", "lineno": 175}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment0]", "type": "Function", "lineno": 175}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment1]", "type": "Function", "lineno": 175}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "type": "Instance"}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "type": "Class"}]}], "tests": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment0]", "lineno": 175, "outcome": "failed", "keywords": ["pytestmark", "test_MAndroid2_HTTPDownload[testParameters0-testEnvironment0]", "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "testParameters0-testEnvironment0", "TestMAndroid2TestCases", "()", "Python-Practice", "parametrize"], "setup": {"duration": 0.0029926300048828125, "outcome": "passed", "stdout": "------ Setup before class TestMAndroid2TestCases ------\n"}, "call": {"duration": 28.659948587417603, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError: 'command'"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 232, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 394, "message": "in verifyTestCaseResult"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025104559746 has not been occupied.\nCorresponding device serial is 9886734d5647434c32.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 9886734d5647434c32 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/9886734d5647434c32/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7421'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7421\nMO Handset ID is mcloud.matrium.com.au:7421\n{'isSuccess': True, 'startTime': 1592876134347, 'version': '2.20.41Build2020-03-31_15:10:02', 'description': 'MAndroid2 Version is: 2.20.41Build2020-03-31_15:10:02'}\nCommand of HTTP downloading is:  java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7421 3060 download_url \"http://freeweb.siol.net/tehnika/test5M.dat\" fileName \"test5M.dat\"\nResponse of HTTP downloading is:  {'isSuccess': True, 'startTime': 1592876147505, 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'queryId': '1590', 'description': 'The file is downloading,check it later'}\ndeviceSerialList to be disconnected is ['9886734d5647434c32']\ndisconnected everything\r\n##########Calling REST API to release device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/9886734d5647434c32\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\ncheckPoints is: ['HTTP download successfully.', 'Downloaded file exists.']\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x00000196C909A320>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:232: in executeTestCase\n    testResults = verifyTestCaseResult(testEnvironment, testParameters, testCaseInfo, testCaseKey, responseList)\n..\\library\\MAndroid2BaseCommon.py:394: in verifyTestCaseResult\n    testResults = verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\ntestCaseInfo = {'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.'], 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', ...}\nresponseList = [{'startHTTPDownload': {'command': 'java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7421 3060 down..., 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'isSuccess': True, 'queryId': '1590', ...}}}, {}]\n\n    def verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList):\n        # Variables initialization.\n        testResults = []\n    \n        # Verify result with test case check points.\n        checkPoints = testCaseInfo['CheckPoints']\n        print (\"checkPoints is: {}\".format(checkPoints))\n        for checkPoint in checkPoints:\n            testResult = {}\n            testResult['checkPointResult'] = \"failed\"\n            verifiedCheckPointFlag = False\n            if (checkPoint == 'HTTP download successfully.'):\n                for response in responseList:\n                    if 'startHTTPDownload' in response:\n                        testResult = verifyStartHTTPDownloadResponse(testEnvironment, testParameters, response['startHTTPDownload'])\n                        verifiedCheckPointFlag = True\n    \n                    if 'getDownloadedFileInfo' in response:\n                        testResult = verifyDownloadedFileInfoResponse(testEnvironment, testParameters, response['downloadedFileInfo'])\n                        verifiedCheckPointFlag = True\n    \n            if (verifiedCheckPointFlag == False):\n                testResult['failedReason'] = \"Cannot verify this check point in test case.\"\n>               testResult['command'] = response['command']\nE               KeyError: 'command'\n\n..\\library\\MAndroid2BaseCommon.py:551: KeyError"}, "teardown": {"duration": 0.0, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment1]", "lineno": 175, "outcome": "failed", "keywords": ["pytestmark", "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "test_MAndroid2_HTTPDownload[testParameters0-testEnvironment1]", "TestMAndroid2TestCases", "testParameters0-testEnvironment1", "()", "Python-Practice", "parametrize"], "setup": {"duration": 0.0, "outcome": "passed"}, "call": {"duration": 23.928356647491455, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError: 'command'"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 232, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 394, "message": "in verifyTestCaseResult"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025703492762 has not been occupied.\nCorresponding device serial is ce12160ccd1f323f05.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7433'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7433\nMO Handset ID is mcloud.matrium.com.au:7433\n{'isSuccess': True, 'startTime': 1592876158905, 'version': '2.20.41Build2020-06-09_14:00:07', 'description': 'MAndroid2 Version is: 2.20.41Build2020-06-09_14:00:07'}\nCommand of HTTP downloading is:  java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7433 3060 download_url \"http://freeweb.siol.net/tehnika/test5M.dat\" fileName \"test5M.dat\"\nResponse of HTTP downloading is:  {'isSuccess': True, 'startTime': 1592876169771, 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'queryId': '1193', 'description': 'The file is downloading,check it later'}\ndeviceSerialList to be disconnected is ['ce12160ccd1f323f05']\ndisconnected everything\r\n##########Calling REST API to release device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\ncheckPoints is: ['HTTP download successfully.', 'Downloaded file exists.']\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x00000196C9139710>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:232: in executeTestCase\n    testResults = verifyTestCaseResult(testEnvironment, testParameters, testCaseInfo, testCaseKey, responseList)\n..\\library\\MAndroid2BaseCommon.py:394: in verifyTestCaseResult\n    testResults = verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\ntestCaseInfo = {'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.'], 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', ...}\nresponseList = [{'startHTTPDownload': {'command': 'java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7433 3060 down..., 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'isSuccess': True, 'queryId': '1193', ...}}}, {}]\n\n    def verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList):\n        # Variables initialization.\n        testResults = []\n    \n        # Verify result with test case check points.\n        checkPoints = testCaseInfo['CheckPoints']\n        print (\"checkPoints is: {}\".format(checkPoints))\n        for checkPoint in checkPoints:\n            testResult = {}\n            testResult['checkPointResult'] = \"failed\"\n            verifiedCheckPointFlag = False\n            if (checkPoint == 'HTTP download successfully.'):\n                for response in responseList:\n                    if 'startHTTPDownload' in response:\n                        testResult = verifyStartHTTPDownloadResponse(testEnvironment, testParameters, response['startHTTPDownload'])\n                        verifiedCheckPointFlag = True\n    \n                    if 'getDownloadedFileInfo' in response:\n                        testResult = verifyDownloadedFileInfoResponse(testEnvironment, testParameters, response['downloadedFileInfo'])\n                        verifiedCheckPointFlag = True\n    \n            if (verifiedCheckPointFlag == False):\n                testResult['failedReason'] = \"Cannot verify this check point in test case.\"\n>               testResult['command'] = response['command']\nE               KeyError: 'command'\n\n..\\library\\MAndroid2BaseCommon.py:551: KeyError"}, "teardown": {"duration": 0.0, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment0]", "lineno": 175, "outcome": "failed", "keywords": ["testParameters1-testEnvironment0", "pytestmark", "test_MAndroid2_HTTPDownload[testParameters1-testEnvironment0]", "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "TestMAndroid2TestCases", "()", "Python-Practice", "parametrize"], "setup": {"duration": 0.0009968280792236328, "outcome": "passed"}, "call": {"duration": 32.86608648300171, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError: 'command'"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 232, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 394, "message": "in verifyTestCaseResult"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025104559746 has not been occupied.\nCorresponding device serial is 9886734d5647434c32.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 9886734d5647434c32 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/9886734d5647434c32/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7421'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7421\nMO Handset ID is mcloud.matrium.com.au:7421\n{'isSuccess': True, 'startTime': 1592876188042, 'version': '2.20.41Build2020-03-31_15:10:02', 'description': 'MAndroid2 Version is: 2.20.41Build2020-03-31_15:10:02'}\nCommand of HTTP downloading is:  java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7421 3060 download_url \"http://freeweb.siol.net/tehnika/test5M.dat\" fileName \"test5M.dat\"\nResponse of HTTP downloading is:  {'isSuccess': True, 'startTime': 1592876203349, 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'queryId': '1591', 'description': 'The file is downloading,check it later'}\ndeviceSerialList to be disconnected is ['9886734d5647434c32']\ndisconnected everything\r\n##########Calling REST API to release device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/9886734d5647434c32\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\ncheckPoints is: ['HTTP download successfully.', 'Downloaded file exists.']\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x00000196C90E2A58>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:232: in executeTestCase\n    testResults = verifyTestCaseResult(testEnvironment, testParameters, testCaseInfo, testCaseKey, responseList)\n..\\library\\MAndroid2BaseCommon.py:394: in verifyTestCaseResult\n    testResults = verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\ntestCaseInfo = {'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.'], 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', ...}\nresponseList = [{'startHTTPDownload': {'command': 'java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7421 3060 down..., 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'isSuccess': True, 'queryId': '1591', ...}}}, {}]\n\n    def verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList):\n        # Variables initialization.\n        testResults = []\n    \n        # Verify result with test case check points.\n        checkPoints = testCaseInfo['CheckPoints']\n        print (\"checkPoints is: {}\".format(checkPoints))\n        for checkPoint in checkPoints:\n            testResult = {}\n            testResult['checkPointResult'] = \"failed\"\n            verifiedCheckPointFlag = False\n            if (checkPoint == 'HTTP download successfully.'):\n                for response in responseList:\n                    if 'startHTTPDownload' in response:\n                        testResult = verifyStartHTTPDownloadResponse(testEnvironment, testParameters, response['startHTTPDownload'])\n                        verifiedCheckPointFlag = True\n    \n                    if 'getDownloadedFileInfo' in response:\n                        testResult = verifyDownloadedFileInfoResponse(testEnvironment, testParameters, response['downloadedFileInfo'])\n                        verifiedCheckPointFlag = True\n    \n            if (verifiedCheckPointFlag == False):\n                testResult['failedReason'] = \"Cannot verify this check point in test case.\"\n>               testResult['command'] = response['command']\nE               KeyError: 'command'\n\n..\\library\\MAndroid2BaseCommon.py:551: KeyError"}, "teardown": {"duration": 0.0009970664978027344, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment1]", "lineno": 175, "outcome": "failed", "keywords": ["pytestmark", "test_MAndroid2_HTTPDownload[testParameters1-testEnvironment1]", "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "TestMAndroid2TestCases", "testParameters1-testEnvironment1", "()", "Python-Practice", "parametrize"], "setup": {"duration": 0.000997304916381836, "outcome": "passed"}, "call": {"duration": 25.566956281661987, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError: 'command'"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 232, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 394, "message": "in verifyTestCaseResult"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 551, "message": "KeyError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025703492762 has not been occupied.\nCorresponding device serial is ce12160ccd1f323f05.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7433'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7433\nMO Handset ID is mcloud.matrium.com.au:7433\n{'isSuccess': True, 'startTime': 1592876217554, 'version': '2.20.41Build2020-06-09_14:00:07', 'description': 'MAndroid2 Version is: 2.20.41Build2020-06-09_14:00:07'}\nCommand of HTTP downloading is:  java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7433 3060 download_url \"http://freeweb.siol.net/tehnika/test5M.dat\" fileName \"test5M.dat\"\nResponse of HTTP downloading is:  {'isSuccess': True, 'startTime': 1592876226988, 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'queryId': '1194', 'description': 'The file is downloading,check it later'}\ndeviceSerialList to be disconnected is ['ce12160ccd1f323f05']\ndisconnected everything\r\n##########Calling REST API to release device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\ncheckPoints is: ['HTTP download successfully.', 'Downloaded file exists.']\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x00000196C90E2320>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:232: in executeTestCase\n    testResults = verifyTestCaseResult(testEnvironment, testParameters, testCaseInfo, testCaseKey, responseList)\n..\\library\\MAndroid2BaseCommon.py:394: in verifyTestCaseResult\n    testResults = verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\ntestCaseInfo = {'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.'], 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', ...}\nresponseList = [{'startHTTPDownload': {'command': 'java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7433 3060 down..., 'downloadFile': 'sdcard/MAndroid2/Output/DownloadFiles/test5M.dat', 'isSuccess': True, 'queryId': '1194', ...}}}, {}]\n\n    def verifyHTTPDownload(testEnvironment, testParameters, testCaseInfo, responseList):\n        # Variables initialization.\n        testResults = []\n    \n        # Verify result with test case check points.\n        checkPoints = testCaseInfo['CheckPoints']\n        print (\"checkPoints is: {}\".format(checkPoints))\n        for checkPoint in checkPoints:\n            testResult = {}\n            testResult['checkPointResult'] = \"failed\"\n            verifiedCheckPointFlag = False\n            if (checkPoint == 'HTTP download successfully.'):\n                for response in responseList:\n                    if 'startHTTPDownload' in response:\n                        testResult = verifyStartHTTPDownloadResponse(testEnvironment, testParameters, response['startHTTPDownload'])\n                        verifiedCheckPointFlag = True\n    \n                    if 'getDownloadedFileInfo' in response:\n                        testResult = verifyDownloadedFileInfoResponse(testEnvironment, testParameters, response['downloadedFileInfo'])\n                        verifiedCheckPointFlag = True\n    \n            if (verifiedCheckPointFlag == False):\n                testResult['failedReason'] = \"Cannot verify this check point in test case.\"\n>               testResult['command'] = response['command']\nE               KeyError: 'command'\n\n..\\library\\MAndroid2BaseCommon.py:551: KeyError"}, "teardown": {"duration": 0.8967552185058594, "outcome": "passed", "stdout": "------ Teardown after class TestMAndroid2TestCases ------\ntestCaseDetailList is []\n"}}]}