{"created": 1587978440.6153636, "duration": 214.87778973579407, "exitcode": 1, "root": "C:\\Work\\Projects\\Python-Practice", "environment": {"Python": "3.7.1", "Platform": "Windows-10-10.0.18362-SP0", "Packages": {"pytest": "5.3.4", "py": "1.8.1", "pluggy": "0.13.1"}, "Plugins": {"allure-pytest": "2.8.7", "html": "2.1.1", "json-report": "1.2.1", "metadata": "1.8.0", "reportportal": "5.0.0"}, "JAVA_HOME": "C:\\Program Files\\Java\\jre1.8.0_241"}, "summary": {"failed": 4, "passed": 1, "total": 5, "collected": 5}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "type": "Module"}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters0-testEnvironment0]", "type": "Function", "lineno": 43}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters0-testEnvironment1]", "type": "Function", "lineno": 43}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters1-testEnvironment0]", "type": "Function", "lineno": 43}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters1-testEnvironment1]", "type": "Function", "lineno": 43}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_example", "type": "Function", "lineno": 97}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "type": "Instance"}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "type": "Class"}]}], "tests": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters0-testEnvironment0]", "lineno": 43, "outcome": "failed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "()", "pytestmark", "test_MAndroid2_VoiceCall[testParameters0-testEnvironment0]", "Python-Practice", "TestMAndroid2TestCases", "parametrize", "testParameters0-testEnvironment0"], "setup": {"duration": 0.0009970664978027344, "outcome": "passed"}, "metadata": {"testEnvironment": {"MCloud": {"baseUrl": "http://mcloud.matrium.com.au:7100/api/v1"}, "Login": {"User": "Peter.Zhang@matrium.com.au", "accessToken": "Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e"}, "MAndroid2AgentPath": "c:\\tmp\\MatriumMAndroid2-release.jar", "testUsers": {"MO": {"IMSI": "505025104559746", "MSISDN": "+61418673947", "handsetID": "mcloud.matrium.com.au:7541"}, "MT": {"IMSI": "505025703492762", "MSISDN": "+61402537622", "handsetID": "mcloud.matrium.com.au:7569"}}}, "testParameters": {"VoiceCall": {"Duration": 10}}, "testCaseInfo": {"TestCaseID": "MAndroid2_Smoke_Test_001_Voice_Call", "Description": "Basic voice call.", "Precondition": "None.", "TestSteps": ["Place voice call.", "Receive voice call.", "Wait for call duraton.", "End voice call."], "CheckPoints": ["Place voice call successfully.", "Receive voice call successfully.", "End voice call successfully."]}, "testResults": [{"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3010 call_phonenum +61418673947", "response": {"isSuccess": true, "startTime": 1587978195654, "callee": "+61418673947", "networkModeBeforeCall": "LTE", "description": "Make a call successfully"}, "checkPoint": "Place voice call successfully."}, {"checkPointResult": "failed", "failedReason": "Failed to receive voice call.", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3011 ", "response": {"screenshotURL": "/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190351.png", "description": "Call listening is over time, please start it again.", "startTime": 1587978234591, "isSuccess": false}, "checkPoint": "Receive voice call successfully."}, {"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3012", "response": {"isSuccess": true, "endTime": 1587978244492, "networkModeAfterCall": "LTE", "description": "End the call successfully", "screenshotURL": "/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_070404.png"}, "checkPoint": "End voice call successfully."}]}, "call": {"duration": 56.67663264274597, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\testcases\\test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError: assert 'failed' == 'passed'\n  - failed\n  + passed"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError"}], "stdout": "{'VoiceCallTestCaseInfo': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Precondition': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\nVoice call duration is 10\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025104559746 has not been occupied.\nCorresponding device serial is 25cb81cc6f0d7ece.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 25cb81cc6f0d7ece to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7541'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7541\nMO Handset ID is mcloud.matrium.com.au:7541\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025703492762 has not been occupied.\nCorresponding device serial is ce12160ccd1f323f05.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7569'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7569\nMT Handset ID is mcloud.matrium.com.au:7569\nStarting voice call test case.\nCommand of placing basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3010 call_phonenum +61418673947\nResponse of placing basic voice call is:  {'isSuccess': True, 'startTime': 1587978195654, 'callee': '+61418673947', 'networkModeBeforeCall': 'LTE', 'description': 'Make a call successfully'}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3011 \nResponse of receiving basic voice call is:  {'screenshotURL': '/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190351.png', 'description': 'Call listening is over time, please start it again.', 'startTime': 1587978234591, 'isSuccess': False}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3012\nResponse of ending basic voice call is:  {'isSuccess': True, 'endTime': 1587978244492, 'networkModeAfterCall': 'LTE', 'description': 'End the call successfully', 'screenshotURL': '/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_070404.png'}\ndeviceSerialList to be disconnected is ['25cb81cc6f0d7ece', 'ce12160ccd1f323f05']\ndisconnected everything\r\n##########Calling REST API to release device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is ['ce12160ccd1f323f05']\n##########Calling REST API to release device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001B708993978>\njson_metadata = {'testCaseInfo': {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice cal...and': 'java -jar c:\\\\tmp\\\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3012', 'failedReason': 'none', ...}]}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...com.au:7541'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622', 'handsetID': 'mcloud.matrium.com.au:7569'}}}\ntestParameters = {'VoiceCall': {'Duration': 10}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", testParameters)\n    def test_MAndroid2_VoiceCall(self, json_metadata, testEnvironment, testParameters):\n        # Initialization\n        self.testEnvironment = testEnvironment\n        self.testParameters = testParameters\n        self.responseList = []\n        self.testResults = []\n        testCaseKey = 'VoiceCall'\n        testCaseInfoFileName = \"../configuration/testCaseInfo/testCaseInfo.yaml\"\n        testCaseInfoName = \"VoiceCallTestCaseInfo\"\n    \n        # Read test case info.\n        self.testCaseInfo = getConfigureInfo(testCaseInfoFileName, testCaseInfoName)\n    \n        # Checking Test parameters.\n        self.checkConfiguration(testEnvironment)\n        assert (\"VoiceCall\" in self.testParameters)\n        assert (\"Duration\" in self.testParameters['VoiceCall'])\n        print(\"Voice call duration is {}\".format(testParameters['VoiceCall']['Duration']))\n    \n        # Connect available test handset on mcloud from specified IMSI.\n        mcloud = MCloudControl()\n    \n        # Set test environment variables.\n        mcloud.mcloudBaseUrl = self.testEnvironment['MCloud']['baseUrl']\n        mcloud.mcloudLoginUser = self.testEnvironment['Login']['User']\n        mcloud.mcloudLoginToken = self.testEnvironment['Login']['accessToken']\n    \n        self.testEnvironment['testUsers']['MO']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MO']['IMSI'])\n        print(\"MO Handset ID is {}\".format(self.testEnvironment['testUsers']['MO']['handsetID']))\n    \n        self.testEnvironment['testUsers']['MT']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MT']['IMSI'])\n        print(\"MT Handset ID is {}\".format(self.testEnvironment['testUsers']['MT']['handsetID']))\n    \n        # Starting test logic.\n        print(\"Starting voice call test case.\")\n        self.responseList = executeTestLogic(self.testEnvironment, self.testCaseInfo, testCaseKey, self.testParameters)\n    \n        # Disconnect testing users.\n        print(\"deviceSerialList to be disconnected is {}\".format(mcloud.deviceSerialList))\n        mcloud.tearDownUsingDevices(mcloud.deviceSerialList)\n    \n        # Verify test result.\n        self.testResults = verifyTestCaseResult(self.testCaseInfo, testCaseKey, self.responseList)\n    \n        # Adding information to json report.\n        addJsonReportMetaData(json_metadata, self.testEnvironment, self.testParameters, self.testCaseInfo, self.testResults)\n    \n        # Assert test result.\n        for result in self.testResults:\n>           assert (result['checkPointResult'] == \"passed\")\nE           AssertionError: assert 'failed' == 'passed'\nE             - failed\nE             + passed\n\ntest_MAndroid2TestCases.py:95: AssertionError"}, "teardown": {"duration": 0.0, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters0-testEnvironment1]", "lineno": 43, "outcome": "failed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "()", "pytestmark", "test_MAndroid2_VoiceCall[testParameters0-testEnvironment1]", "Python-Practice", "TestMAndroid2TestCases", "parametrize", "testParameters0-testEnvironment1"], "setup": {"duration": 0.0, "outcome": "passed"}, "metadata": {"testEnvironment": {"MCloud": {"baseUrl": "http://mcloud.matrium.com.au:7100/api/v1"}, "Login": {"User": "Peter.Zhang@matrium.com.au", "accessToken": "Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e"}, "MAndroid2AgentPath": "c:\\tmp\\MatriumMAndroid2-release.jar", "testUsers": {"MO": {"IMSI": "505025703492762", "MSISDN": "+61402537622", "handsetID": "mcloud.matrium.com.au:7569"}, "MT": {"IMSI": "505025104559746", "MSISDN": "+61418673947", "handsetID": "mcloud.matrium.com.au:7541"}}}, "testParameters": {"VoiceCall": {"Duration": 10}}, "testCaseInfo": {"TestCaseID": "MAndroid2_Smoke_Test_001_Voice_Call", "Description": "Basic voice call.", "Precondition": "None.", "TestSteps": ["Place voice call.", "Receive voice call.", "Wait for call duraton.", "End voice call."], "CheckPoints": ["Place voice call successfully.", "Receive voice call successfully.", "End voice call successfully."]}, "testResults": [{"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3010 call_phonenum +61402537622", "response": {"isSuccess": true, "startTime": 1587978252210, "callee": "+61402537622", "networkModeBeforeCall": "LTE", "description": "Make a call successfully"}, "checkPoint": "Place voice call successfully."}, {"checkPointResult": "failed", "failedReason": "Failed to receive voice call.", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3011 ", "response": {"isSuccess": false, "startTime": 0, "description": "Call listening is over time, please start it again", "screenshotURL": ""}, "checkPoint": "Receive voice call successfully."}, {"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3012", "response": {"screenshotURL": "/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190526.png", "description": "End the call successfully.", "endTime": "1587978333261", "networkModeAfterCall": "LTE", "isSuccess": "true"}, "checkPoint": "End voice call successfully."}]}, "call": {"duration": 55.96746039390564, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\testcases\\test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError: assert 'failed' == 'passed'\n  - failed\n  + passed"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError"}], "stdout": "{'VoiceCallTestCaseInfo': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Precondition': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\nVoice call duration is 10\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025703492762 has not been occupied.\nCorresponding device serial is ce12160ccd1f323f05.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7569'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7569\nMO Handset ID is mcloud.matrium.com.au:7569\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025104559746 has not been occupied.\nCorresponding device serial is 25cb81cc6f0d7ece.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 25cb81cc6f0d7ece to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7541'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7541\nMT Handset ID is mcloud.matrium.com.au:7541\nStarting voice call test case.\nCommand of placing basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3010 call_phonenum +61402537622\nResponse of placing basic voice call is:  {'isSuccess': True, 'startTime': 1587978252210, 'callee': '+61402537622', 'networkModeBeforeCall': 'LTE', 'description': 'Make a call successfully'}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3011 \nResponse of receiving basic voice call is:  {'isSuccess': False, 'startTime': 0, 'description': 'Call listening is over time, please start it again', 'screenshotURL': ''}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3012\nResponse of ending basic voice call is:  {'screenshotURL': '/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190526.png', 'description': 'End the call successfully.', 'endTime': '1587978333261', 'networkModeAfterCall': 'LTE', 'isSuccess': 'true'}\ndeviceSerialList to be disconnected is ['ce12160ccd1f323f05', '25cb81cc6f0d7ece']\ndisconnected everything\r\n##########Calling REST API to release device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is ['25cb81cc6f0d7ece']\n##########Calling REST API to release device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001B708A16B70>\njson_metadata = {'testCaseInfo': {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice cal...and': 'java -jar c:\\\\tmp\\\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3012', 'failedReason': 'none', ...}]}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...com.au:7569'}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947', 'handsetID': 'mcloud.matrium.com.au:7541'}}}\ntestParameters = {'VoiceCall': {'Duration': 10}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", testParameters)\n    def test_MAndroid2_VoiceCall(self, json_metadata, testEnvironment, testParameters):\n        # Initialization\n        self.testEnvironment = testEnvironment\n        self.testParameters = testParameters\n        self.responseList = []\n        self.testResults = []\n        testCaseKey = 'VoiceCall'\n        testCaseInfoFileName = \"../configuration/testCaseInfo/testCaseInfo.yaml\"\n        testCaseInfoName = \"VoiceCallTestCaseInfo\"\n    \n        # Read test case info.\n        self.testCaseInfo = getConfigureInfo(testCaseInfoFileName, testCaseInfoName)\n    \n        # Checking Test parameters.\n        self.checkConfiguration(testEnvironment)\n        assert (\"VoiceCall\" in self.testParameters)\n        assert (\"Duration\" in self.testParameters['VoiceCall'])\n        print(\"Voice call duration is {}\".format(testParameters['VoiceCall']['Duration']))\n    \n        # Connect available test handset on mcloud from specified IMSI.\n        mcloud = MCloudControl()\n    \n        # Set test environment variables.\n        mcloud.mcloudBaseUrl = self.testEnvironment['MCloud']['baseUrl']\n        mcloud.mcloudLoginUser = self.testEnvironment['Login']['User']\n        mcloud.mcloudLoginToken = self.testEnvironment['Login']['accessToken']\n    \n        self.testEnvironment['testUsers']['MO']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MO']['IMSI'])\n        print(\"MO Handset ID is {}\".format(self.testEnvironment['testUsers']['MO']['handsetID']))\n    \n        self.testEnvironment['testUsers']['MT']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MT']['IMSI'])\n        print(\"MT Handset ID is {}\".format(self.testEnvironment['testUsers']['MT']['handsetID']))\n    \n        # Starting test logic.\n        print(\"Starting voice call test case.\")\n        self.responseList = executeTestLogic(self.testEnvironment, self.testCaseInfo, testCaseKey, self.testParameters)\n    \n        # Disconnect testing users.\n        print(\"deviceSerialList to be disconnected is {}\".format(mcloud.deviceSerialList))\n        mcloud.tearDownUsingDevices(mcloud.deviceSerialList)\n    \n        # Verify test result.\n        self.testResults = verifyTestCaseResult(self.testCaseInfo, testCaseKey, self.responseList)\n    \n        # Adding information to json report.\n        addJsonReportMetaData(json_metadata, self.testEnvironment, self.testParameters, self.testCaseInfo, self.testResults)\n    \n        # Assert test result.\n        for result in self.testResults:\n>           assert (result['checkPointResult'] == \"passed\")\nE           AssertionError: assert 'failed' == 'passed'\nE             - failed\nE             + passed\n\ntest_MAndroid2TestCases.py:95: AssertionError"}, "teardown": {"duration": 0.0009975433349609375, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters1-testEnvironment0]", "lineno": 43, "outcome": "failed", "keywords": ["test_MAndroid2_VoiceCall[testParameters1-testEnvironment0]", "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "()", "pytestmark", "Python-Practice", "TestMAndroid2TestCases", "parametrize", "testParameters1-testEnvironment0"], "setup": {"duration": 0.000997304916381836, "outcome": "passed"}, "metadata": {"testEnvironment": {"MCloud": {"baseUrl": "http://mcloud.matrium.com.au:7100/api/v1"}, "Login": {"User": "Peter.Zhang@matrium.com.au", "accessToken": "Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e"}, "MAndroid2AgentPath": "c:\\tmp\\MatriumMAndroid2-release.jar", "testUsers": {"MO": {"IMSI": "505025104559746", "MSISDN": "+61418673947", "handsetID": "mcloud.matrium.com.au:7541"}, "MT": {"IMSI": "505025703492762", "MSISDN": "+61402537622", "handsetID": "mcloud.matrium.com.au:7569"}}}, "testParameters": {"VoiceCall": {"Duration": 5}}, "testCaseInfo": {"TestCaseID": "MAndroid2_Smoke_Test_001_Voice_Call", "Description": "Basic voice call.", "Precondition": "None.", "TestSteps": ["Place voice call.", "Receive voice call.", "Wait for call duraton.", "End voice call."], "CheckPoints": ["Place voice call successfully.", "Receive voice call successfully.", "End voice call successfully."]}, "testResults": [{"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3010 call_phonenum +61418673947", "response": {"isSuccess": true, "startTime": 1587978308192, "callee": "+61418673947", "networkModeBeforeCall": "LTE", "description": "Make a call successfully"}, "checkPoint": "Place voice call successfully."}, {"checkPointResult": "failed", "failedReason": "Failed to receive voice call.", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3011 ", "response": {"screenshotURL": "/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190543.png", "description": "Call listening is over time, please start it again.", "startTime": 1587978346931, "isSuccess": false}, "checkPoint": "Receive voice call successfully."}, {"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3012", "response": {"isSuccess": true, "endTime": 1587978351143, "networkModeAfterCall": "LTE", "description": "End the call successfully", "screenshotURL": "/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_070551.png"}, "checkPoint": "End voice call successfully."}]}, "call": {"duration": 50.51584267616272, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\testcases\\test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError: assert 'failed' == 'passed'\n  - failed\n  + passed"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError"}], "stdout": "{'VoiceCallTestCaseInfo': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Precondition': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\nVoice call duration is 5\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025104559746 has not been occupied.\nCorresponding device serial is 25cb81cc6f0d7ece.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 25cb81cc6f0d7ece to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7541'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7541\nMO Handset ID is mcloud.matrium.com.au:7541\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025703492762 has not been occupied.\nCorresponding device serial is ce12160ccd1f323f05.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7569'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7569\nMT Handset ID is mcloud.matrium.com.au:7569\nStarting voice call test case.\nCommand of placing basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3010 call_phonenum +61418673947\nResponse of placing basic voice call is:  {'isSuccess': True, 'startTime': 1587978308192, 'callee': '+61418673947', 'networkModeBeforeCall': 'LTE', 'description': 'Make a call successfully'}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3011 \nResponse of receiving basic voice call is:  {'screenshotURL': '/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190543.png', 'description': 'Call listening is over time, please start it again.', 'startTime': 1587978346931, 'isSuccess': False}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3012\nResponse of ending basic voice call is:  {'isSuccess': True, 'endTime': 1587978351143, 'networkModeAfterCall': 'LTE', 'description': 'End the call successfully', 'screenshotURL': '/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_070551.png'}\ndeviceSerialList to be disconnected is ['25cb81cc6f0d7ece', 'ce12160ccd1f323f05']\ndisconnected everything\r\n##########Calling REST API to release device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is ['ce12160ccd1f323f05']\n##########Calling REST API to release device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001B708A74860>\njson_metadata = {'testCaseInfo': {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice cal...and': 'java -jar c:\\\\tmp\\\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3012', 'failedReason': 'none', ...}]}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...com.au:7541'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622', 'handsetID': 'mcloud.matrium.com.au:7569'}}}\ntestParameters = {'VoiceCall': {'Duration': 5}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", testParameters)\n    def test_MAndroid2_VoiceCall(self, json_metadata, testEnvironment, testParameters):\n        # Initialization\n        self.testEnvironment = testEnvironment\n        self.testParameters = testParameters\n        self.responseList = []\n        self.testResults = []\n        testCaseKey = 'VoiceCall'\n        testCaseInfoFileName = \"../configuration/testCaseInfo/testCaseInfo.yaml\"\n        testCaseInfoName = \"VoiceCallTestCaseInfo\"\n    \n        # Read test case info.\n        self.testCaseInfo = getConfigureInfo(testCaseInfoFileName, testCaseInfoName)\n    \n        # Checking Test parameters.\n        self.checkConfiguration(testEnvironment)\n        assert (\"VoiceCall\" in self.testParameters)\n        assert (\"Duration\" in self.testParameters['VoiceCall'])\n        print(\"Voice call duration is {}\".format(testParameters['VoiceCall']['Duration']))\n    \n        # Connect available test handset on mcloud from specified IMSI.\n        mcloud = MCloudControl()\n    \n        # Set test environment variables.\n        mcloud.mcloudBaseUrl = self.testEnvironment['MCloud']['baseUrl']\n        mcloud.mcloudLoginUser = self.testEnvironment['Login']['User']\n        mcloud.mcloudLoginToken = self.testEnvironment['Login']['accessToken']\n    \n        self.testEnvironment['testUsers']['MO']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MO']['IMSI'])\n        print(\"MO Handset ID is {}\".format(self.testEnvironment['testUsers']['MO']['handsetID']))\n    \n        self.testEnvironment['testUsers']['MT']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MT']['IMSI'])\n        print(\"MT Handset ID is {}\".format(self.testEnvironment['testUsers']['MT']['handsetID']))\n    \n        # Starting test logic.\n        print(\"Starting voice call test case.\")\n        self.responseList = executeTestLogic(self.testEnvironment, self.testCaseInfo, testCaseKey, self.testParameters)\n    \n        # Disconnect testing users.\n        print(\"deviceSerialList to be disconnected is {}\".format(mcloud.deviceSerialList))\n        mcloud.tearDownUsingDevices(mcloud.deviceSerialList)\n    \n        # Verify test result.\n        self.testResults = verifyTestCaseResult(self.testCaseInfo, testCaseKey, self.responseList)\n    \n        # Adding information to json report.\n        addJsonReportMetaData(json_metadata, self.testEnvironment, self.testParameters, self.testCaseInfo, self.testResults)\n    \n        # Assert test result.\n        for result in self.testResults:\n>           assert (result['checkPointResult'] == \"passed\")\nE           AssertionError: assert 'failed' == 'passed'\nE             - failed\nE             + passed\n\ntest_MAndroid2TestCases.py:95: AssertionError"}, "teardown": {"duration": 0.0009975433349609375, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_VoiceCall[testParameters1-testEnvironment1]", "lineno": 43, "outcome": "failed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "()", "pytestmark", "testParameters1-testEnvironment1", "Python-Practice", "test_MAndroid2_VoiceCall[testParameters1-testEnvironment1]", "TestMAndroid2TestCases", "parametrize"], "setup": {"duration": 0.000997781753540039, "outcome": "passed"}, "metadata": {"testEnvironment": {"MCloud": {"baseUrl": "http://mcloud.matrium.com.au:7100/api/v1"}, "Login": {"User": "Peter.Zhang@matrium.com.au", "accessToken": "Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e"}, "MAndroid2AgentPath": "c:\\tmp\\MatriumMAndroid2-release.jar", "testUsers": {"MO": {"IMSI": "505025703492762", "MSISDN": "+61402537622", "handsetID": "mcloud.matrium.com.au:7569"}, "MT": {"IMSI": "505025104559746", "MSISDN": "+61418673947", "handsetID": "mcloud.matrium.com.au:7541"}}}, "testParameters": {"VoiceCall": {"Duration": 5}}, "testCaseInfo": {"TestCaseID": "MAndroid2_Smoke_Test_001_Voice_Call", "Description": "Basic voice call.", "Precondition": "None.", "TestSteps": ["Place voice call.", "Receive voice call.", "Wait for call duraton.", "End voice call."], "CheckPoints": ["Place voice call successfully.", "Receive voice call successfully.", "End voice call successfully."]}, "testResults": [{"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3010 call_phonenum +61402537622", "response": {"isSuccess": true, "startTime": 1587978358749, "callee": "+61402537622", "networkModeBeforeCall": "LTE", "description": "Make a call successfully"}, "checkPoint": "Place voice call successfully."}, {"checkPointResult": "failed", "failedReason": "Failed to receive voice call.", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3011 ", "response": {"isSuccess": false, "startTime": 0, "description": "Call listening is over time, please start it again", "screenshotURL": ""}, "checkPoint": "Receive voice call successfully."}, {"checkPointResult": "passed", "failedReason": "none", "command": "java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3012", "response": {"screenshotURL": "/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190707.png", "description": "End the call successfully.", "endTime": "1587978434834", "networkModeAfterCall": "HSPAP", "isSuccess": "true"}, "checkPoint": "End voice call successfully."}]}, "call": {"duration": 51.2530996799469, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\testcases\\test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError: assert 'failed' == 'passed'\n  - failed\n  + passed"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 95, "message": "AssertionError"}], "stdout": "{'VoiceCallTestCaseInfo': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Precondition': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\nVoice call duration is 5\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025703492762 has not been occupied.\nCorresponding device serial is ce12160ccd1f323f05.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7569'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7569\nMO Handset ID is mcloud.matrium.com.au:7569\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025104559746 has not been occupied.\nCorresponding device serial is 25cb81cc6f0d7ece.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 25cb81cc6f0d7ece to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7541'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7541\nMT Handset ID is mcloud.matrium.com.au:7541\nStarting voice call test case.\nCommand of placing basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3010 call_phonenum +61402537622\nResponse of placing basic voice call is:  {'isSuccess': True, 'startTime': 1587978358749, 'callee': '+61402537622', 'networkModeBeforeCall': 'LTE', 'description': 'Make a call successfully'}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7541 3011 \nResponse of receiving basic voice call is:  {'isSuccess': False, 'startTime': 0, 'description': 'Call listening is over time, please start it again', 'screenshotURL': ''}\nCommand of receiving basic voice call is:  java -jar c:\\tmp\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3012\nResponse of ending basic voice call is:  {'screenshotURL': '/sdcard/MAndroid2/Output/Screenshot/takescreen_20200427_190707.png', 'description': 'End the call successfully.', 'endTime': '1587978434834', 'networkModeAfterCall': 'HSPAP', 'isSuccess': 'true'}\ndeviceSerialList to be disconnected is ['ce12160ccd1f323f05', '25cb81cc6f0d7ece']\ndisconnected everything\r\n##########Calling REST API to release device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is ['25cb81cc6f0d7ece']\n##########Calling REST API to release device 25cb81cc6f0d7ece on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/25cb81cc6f0d7ece\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nRemaining released deviceSerialList is []\ndisconnected everything\r\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001B708A6B048>\njson_metadata = {'testCaseInfo': {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice cal...and': 'java -jar c:\\\\tmp\\\\MatriumMAndroid2-release.jar mcloud.matrium.com.au:7569 3012', 'failedReason': 'none', ...}]}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...com.au:7569'}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947', 'handsetID': 'mcloud.matrium.com.au:7541'}}}\ntestParameters = {'VoiceCall': {'Duration': 5}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", testParameters)\n    def test_MAndroid2_VoiceCall(self, json_metadata, testEnvironment, testParameters):\n        # Initialization\n        self.testEnvironment = testEnvironment\n        self.testParameters = testParameters\n        self.responseList = []\n        self.testResults = []\n        testCaseKey = 'VoiceCall'\n        testCaseInfoFileName = \"../configuration/testCaseInfo/testCaseInfo.yaml\"\n        testCaseInfoName = \"VoiceCallTestCaseInfo\"\n    \n        # Read test case info.\n        self.testCaseInfo = getConfigureInfo(testCaseInfoFileName, testCaseInfoName)\n    \n        # Checking Test parameters.\n        self.checkConfiguration(testEnvironment)\n        assert (\"VoiceCall\" in self.testParameters)\n        assert (\"Duration\" in self.testParameters['VoiceCall'])\n        print(\"Voice call duration is {}\".format(testParameters['VoiceCall']['Duration']))\n    \n        # Connect available test handset on mcloud from specified IMSI.\n        mcloud = MCloudControl()\n    \n        # Set test environment variables.\n        mcloud.mcloudBaseUrl = self.testEnvironment['MCloud']['baseUrl']\n        mcloud.mcloudLoginUser = self.testEnvironment['Login']['User']\n        mcloud.mcloudLoginToken = self.testEnvironment['Login']['accessToken']\n    \n        self.testEnvironment['testUsers']['MO']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MO']['IMSI'])\n        print(\"MO Handset ID is {}\".format(self.testEnvironment['testUsers']['MO']['handsetID']))\n    \n        self.testEnvironment['testUsers']['MT']['handsetID'] = mcloud.connectToMcloudUser(self.testEnvironment['testUsers']['MT']['IMSI'])\n        print(\"MT Handset ID is {}\".format(self.testEnvironment['testUsers']['MT']['handsetID']))\n    \n        # Starting test logic.\n        print(\"Starting voice call test case.\")\n        self.responseList = executeTestLogic(self.testEnvironment, self.testCaseInfo, testCaseKey, self.testParameters)\n    \n        # Disconnect testing users.\n        print(\"deviceSerialList to be disconnected is {}\".format(mcloud.deviceSerialList))\n        mcloud.tearDownUsingDevices(mcloud.deviceSerialList)\n    \n        # Verify test result.\n        self.testResults = verifyTestCaseResult(self.testCaseInfo, testCaseKey, self.responseList)\n    \n        # Adding information to json report.\n        addJsonReportMetaData(json_metadata, self.testEnvironment, self.testParameters, self.testCaseInfo, self.testResults)\n    \n        # Assert test result.\n        for result in self.testResults:\n>           assert (result['checkPointResult'] == \"passed\")\nE           AssertionError: assert 'failed' == 'passed'\nE             - failed\nE             + passed\n\ntest_MAndroid2TestCases.py:95: AssertionError"}, "teardown": {"duration": 0.0009975433349609375, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_example", "lineno": 97, "outcome": "passed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "()", "test_example", "Python-Practice", "TestMAndroid2TestCases"], "setup": {"duration": 0.0, "outcome": "passed"}, "call": {"duration": 0.0009975433349609375, "outcome": "passed", "stdout": "***************************test Example************************************\n"}, "teardown": {"duration": 0.0009975433349609375, "outcome": "passed"}}]}