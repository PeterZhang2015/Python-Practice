{"created": 1592870215.6785715, "duration": 30.892194986343384, "exitcode": 1, "root": "C:\\Work\\Projects\\Python-Practice", "environment": {"Python": "3.7.1", "Platform": "Windows-10-10.0.18362-SP0", "Packages": {"pytest": "5.3.4", "py": "1.8.1", "pluggy": "0.13.1"}, "Plugins": {"allure-pytest": "2.8.7", "html": "2.1.1", "json-report": "1.2.1", "metadata": "1.8.0", "reportportal": "5.0.0"}, "JAVA_HOME": "C:\\Program Files\\Java\\jdk1.8.0_162"}, "summary": {"failed": 4, "total": 4, "collected": 4}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "type": "Module"}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment0]", "type": "Function", "lineno": 175}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment1]", "type": "Function", "lineno": 175}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment0]", "type": "Function", "lineno": 175}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment1]", "type": "Function", "lineno": 175}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "type": "Instance"}]}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "outcome": "passed", "result": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases", "type": "Class"}]}], "tests": [{"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment0]", "lineno": 175, "outcome": "failed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "TestMAndroid2TestCases", "testParameters0-testEnvironment0", "Python-Practice", "()", "test_MAndroid2_HTTPDownload[testParameters0-testEnvironment0]", "pytestmark", "parametrize"], "setup": {"duration": 0.002992868423461914, "outcome": "passed", "stdout": "------ Setup before class TestMAndroid2TestCases ------\n"}, "call": {"duration": 0.9178309440612793, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseAPI.py", "lineno": 44, "message": "AssertionError"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 223, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 115, "message": "in connectTestUsers"}, {"path": "..\\library\\MAndroid2BaseAPI.py", "lineno": 44, "message": "AssertionError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025104559746 has not been occupied.\nCorresponding device serial is 9886734d5647434c32.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 9886734d5647434c32 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/9886734d5647434c32/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7421'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7421\nMO Handset ID is mcloud.matrium.com.au:7421\n{'screenshotURL': 'null', 'description': 'Handset is offline, check your handset_id parameter.', 'startTime': 1592870185635, 'isSuccess': False}\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001745EB2A780>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...61418673947', 'handsetID': 'mcloud.matrium.com.au:7421'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:223: in executeTestCase\n    connectTestUsers(testEnvironment, userFlag)\n..\\library\\MAndroid2BaseCommon.py:115: in connectTestUsers\n    testEnvironment['testUsers']['MO']['handsetID'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nMAndroid2AgentPath = 'c:/tmp/MatriumMAndroid2-release.jar'\nhandsetId = 'mcloud.matrium.com.au:7421'\n\n    def getMAndroid2Version(MAndroid2AgentPath, handsetId):\n        # Initialization\n        version = {}\n    \n        # Construct command\n        command = \"java -jar {} {} {}\".format(MAndroid2AgentPath,\n                                              handsetId,\n                                              GET_MANDROID2_VERSION_CODE)\n        # Execute command\n        response = json.loads(subprocess.check_output(command.split()))\n        print (response)\n>       assert ('version' in response)\nE       AssertionError\n\n..\\library\\MAndroid2BaseAPI.py:44: AssertionError"}, "teardown": {"duration": 0.0, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters0-testEnvironment1]", "lineno": 175, "outcome": "failed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "TestMAndroid2TestCases", "Python-Practice", "testParameters0-testEnvironment1", "()", "pytestmark", "parametrize", "test_MAndroid2_HTTPDownload[testParameters0-testEnvironment1]"], "setup": {"duration": 0.0009980201721191406, "outcome": "passed"}, "call": {"duration": 6.9275617599487305, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseCommon.py", "lineno": 351, "message": "KeyError: 'WebBrowsing'"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 226, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 351, "message": "KeyError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\nHandset with IMSI 505025703492762 has not been occupied.\nCorresponding device serial is ce12160ccd1f323f05.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7433'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7433\nMO Handset ID is mcloud.matrium.com.au:7433\n{'isSuccess': True, 'startTime': 1592870078701, 'version': '2.20.41Build2020-06-09_14:00:07', 'description': 'MAndroid2 Version is: 2.20.41Build2020-06-09_14:00:07'}\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001745EC882B0>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:226: in executeTestCase\n    responseList = executeTestLogic(testEnvironment, testCaseInfo, testCaseKey, testParameters)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestCaseInfo = {'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.'], 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', ...}\ntestCaseKey = 'HTTPDownload'\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    def executeTestLogic(testEnvironment, testCaseInfo, testCaseKey, testParameters):\n    \n        # Variables initialization.\n        responseList = []\n    \n        # Test logic for voice call.\n        if (testCaseKey == 'VoiceCall'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Place voice call.'):\n                    placeVoiceCallResponse = placeBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testEnvironment['testUsers']['MT']['MSISDN'])\n                    response['placeVoiceCall'] = placeVoiceCallResponse\n                elif (testStep == 'Receive voice call.'):\n                    receiveVoiceCallResponse = receiveBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                            testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveVoiceCall'] = receiveVoiceCallResponse\n                elif (testStep == 'Wait for call duraton.'):\n                    if (testParameters['VoiceCall']['Duration'] > 0):\n                            sleep(testParameters['VoiceCall']['Duration'])\n                elif (testStep == 'End voice call.'):\n                    endVoiceCallResponse = endBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MO']['handsetID'])\n                    response['endVoiceCall'] = endVoiceCallResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for SMS.\n        elif (testCaseKey == 'SMS'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Send SMS.'):\n                    sendSMSResponse = sendSMS(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testEnvironment['testUsers']['MT']['MSISDN'],\n                                                        testParameters['SMS']['smsBody'])\n                    response['sendSMS'] = sendSMSResponse\n                elif (testStep == 'Wait for SMS duraton.'):\n                    if (testParameters['SMS']['Duration'] > 0):\n                            sleep(testParameters['SMS']['Duration'])\n                elif (testStep == 'Receive SMS.'):\n                    receiveSMSResponse = receiveSMS(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveSMS'] = receiveSMSResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for MMS.\n        elif (testCaseKey == 'MMS'):\n    \n            testPreconditions = testCaseInfo['Preconditions']\n            for testPrecondition in testPreconditions:\n                response = {}\n                if (testPrecondition == 'Get a file as MMS url by 1033 API.'):\n                    mmsUrl = getMMSUrl(testEnvironment['MAndroid2AgentPath'],\n                              testEnvironment['testUsers']['MO']['handsetID'])\n    \n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Unlock handset screen.'):\n                    unlockHandsetScreenResponse = unlockHandsetScreen(testEnvironment['MAndroid2AgentPath'],\n                                              testEnvironment['testUsers']['MO']['handsetID'])\n                    response['unlockHandsetScreen'] = unlockHandsetScreenResponse\n                elif (testStep == 'Wait for screen unlock.'):\n                    if (testParameters['MMS']['ScreenUnlockDuration'] > 0):\n                            sleep(testParameters['MMS']['ScreenUnlockDuration'])\n                elif (testStep == 'Send MMS.'):\n                    sendMMSResponse = sendMMS(testEnvironment['MAndroid2AgentPath'],\n                                              testEnvironment['testUsers']['MO']['handsetID'],\n                                              testEnvironment['testUsers']['MT']['MSISDN'],\n                                              testParameters['MMS']['mmsBody'],\n                                              mmsUrl)\n                    response['sendMMS'] = sendMMSResponse\n                elif (testStep == 'Wait for MMS duraton.'):\n                    if (testParameters['MMS']['Duration'] > 0):\n                            sleep(testParameters['MMS']['Duration'])\n                elif (testStep == 'Receive MMS.'):\n                    receiveMMSResponse = receiveMMS(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveMMS'] = receiveMMSResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for web browsing.\n        elif (testCaseKey == 'WebBrowsing'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Web Browsing.'):\n                    webBrowsingResponse = webBrowsing(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testParameters['WebBrowsing']['webUrl'])\n                    response['webBrowsing'] = webBrowsingResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for HTTP Download.\n        elif (testCaseKey == 'HTTPDownload'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Start HTTP download.'):\n                    startHTTPDownloadResponse = startHTTPDownload(testEnvironment['MAndroid2AgentPath'],\n                                                                  testEnvironment['testUsers']['MO']['handsetID'],\n>                                                                 testParameters['WebBrowsing']['webUrl'])\nE                   KeyError: 'WebBrowsing'\n\n..\\library\\MAndroid2BaseCommon.py:351: KeyError"}, "teardown": {"duration": 0.0009963512420654297, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment0]", "lineno": 175, "outcome": "failed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "TestMAndroid2TestCases", "testParameters1-testEnvironment0", "Python-Practice", "()", "test_MAndroid2_HTTPDownload[testParameters1-testEnvironment0]", "pytestmark", "parametrize"], "setup": {"duration": 0.009972333908081055, "outcome": "passed"}, "call": {"duration": 12.056087255477905, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseCommon.py", "lineno": 351, "message": "KeyError: 'WebBrowsing'"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 226, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 351, "message": "KeyError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\n##########Calling REST API to release device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/9886734d5647434c32\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nHandset with IMSI 505025104559746 has been occupied by myself Peter.Zhang@matrium.com.au.\nFind the matched IMSI 505025104559746 on mcloud\n##########Calling REST API to use device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding 9886734d5647434c32 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device 9886734d5647434c32 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/9886734d5647434c32/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7421'}\nconnect 505025104559746 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7421\nMO Handset ID is mcloud.matrium.com.au:7421\n{'isSuccess': True, 'startTime': 1592870091379, 'version': '2.20.41Build2020-03-31_15:10:02', 'description': 'MAndroid2 Version is: 2.20.41Build2020-03-31_15:10:02'}\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001745EC0E748>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:226: in executeTestCase\n    responseList = executeTestLogic(testEnvironment, testCaseInfo, testCaseKey, testParameters)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestCaseInfo = {'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.'], 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', ...}\ntestCaseKey = 'HTTPDownload'\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    def executeTestLogic(testEnvironment, testCaseInfo, testCaseKey, testParameters):\n    \n        # Variables initialization.\n        responseList = []\n    \n        # Test logic for voice call.\n        if (testCaseKey == 'VoiceCall'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Place voice call.'):\n                    placeVoiceCallResponse = placeBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testEnvironment['testUsers']['MT']['MSISDN'])\n                    response['placeVoiceCall'] = placeVoiceCallResponse\n                elif (testStep == 'Receive voice call.'):\n                    receiveVoiceCallResponse = receiveBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                            testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveVoiceCall'] = receiveVoiceCallResponse\n                elif (testStep == 'Wait for call duraton.'):\n                    if (testParameters['VoiceCall']['Duration'] > 0):\n                            sleep(testParameters['VoiceCall']['Duration'])\n                elif (testStep == 'End voice call.'):\n                    endVoiceCallResponse = endBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MO']['handsetID'])\n                    response['endVoiceCall'] = endVoiceCallResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for SMS.\n        elif (testCaseKey == 'SMS'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Send SMS.'):\n                    sendSMSResponse = sendSMS(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testEnvironment['testUsers']['MT']['MSISDN'],\n                                                        testParameters['SMS']['smsBody'])\n                    response['sendSMS'] = sendSMSResponse\n                elif (testStep == 'Wait for SMS duraton.'):\n                    if (testParameters['SMS']['Duration'] > 0):\n                            sleep(testParameters['SMS']['Duration'])\n                elif (testStep == 'Receive SMS.'):\n                    receiveSMSResponse = receiveSMS(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveSMS'] = receiveSMSResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for MMS.\n        elif (testCaseKey == 'MMS'):\n    \n            testPreconditions = testCaseInfo['Preconditions']\n            for testPrecondition in testPreconditions:\n                response = {}\n                if (testPrecondition == 'Get a file as MMS url by 1033 API.'):\n                    mmsUrl = getMMSUrl(testEnvironment['MAndroid2AgentPath'],\n                              testEnvironment['testUsers']['MO']['handsetID'])\n    \n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Unlock handset screen.'):\n                    unlockHandsetScreenResponse = unlockHandsetScreen(testEnvironment['MAndroid2AgentPath'],\n                                              testEnvironment['testUsers']['MO']['handsetID'])\n                    response['unlockHandsetScreen'] = unlockHandsetScreenResponse\n                elif (testStep == 'Wait for screen unlock.'):\n                    if (testParameters['MMS']['ScreenUnlockDuration'] > 0):\n                            sleep(testParameters['MMS']['ScreenUnlockDuration'])\n                elif (testStep == 'Send MMS.'):\n                    sendMMSResponse = sendMMS(testEnvironment['MAndroid2AgentPath'],\n                                              testEnvironment['testUsers']['MO']['handsetID'],\n                                              testEnvironment['testUsers']['MT']['MSISDN'],\n                                              testParameters['MMS']['mmsBody'],\n                                              mmsUrl)\n                    response['sendMMS'] = sendMMSResponse\n                elif (testStep == 'Wait for MMS duraton.'):\n                    if (testParameters['MMS']['Duration'] > 0):\n                            sleep(testParameters['MMS']['Duration'])\n                elif (testStep == 'Receive MMS.'):\n                    receiveMMSResponse = receiveMMS(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveMMS'] = receiveMMSResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for web browsing.\n        elif (testCaseKey == 'WebBrowsing'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Web Browsing.'):\n                    webBrowsingResponse = webBrowsing(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testParameters['WebBrowsing']['webUrl'])\n                    response['webBrowsing'] = webBrowsingResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for HTTP Download.\n        elif (testCaseKey == 'HTTPDownload'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Start HTTP download.'):\n                    startHTTPDownloadResponse = startHTTPDownload(testEnvironment['MAndroid2AgentPath'],\n                                                                  testEnvironment['testUsers']['MO']['handsetID'],\n>                                                                 testParameters['WebBrowsing']['webUrl'])\nE                   KeyError: 'WebBrowsing'\n\n..\\library\\MAndroid2BaseCommon.py:351: KeyError"}, "teardown": {"duration": 0.0009970664978027344, "outcome": "passed"}}, {"nodeid": "MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py::TestMAndroid2TestCases::test_MAndroid2_HTTPDownload[testParameters1-testEnvironment1]", "lineno": 175, "outcome": "failed", "keywords": ["MAndroid2SmokeTest/testcases/test_MAndroid2TestCases.py", "TestMAndroid2TestCases", "testParameters1-testEnvironment1", "test_MAndroid2_HTTPDownload[testParameters1-testEnvironment1]", "Python-Practice", "()", "pytestmark", "parametrize"], "setup": {"duration": 0.000997304916381836, "outcome": "passed"}, "call": {"duration": 10.007110118865967, "outcome": "failed", "crash": {"path": "C:\\Work\\Projects\\Python-Practice\\MAndroid2SmokeTest\\library\\MAndroid2BaseCommon.py", "lineno": 351, "message": "KeyError: 'WebBrowsing'"}, "traceback": [{"path": "test_MAndroid2TestCases.py", "lineno": 187, "message": ""}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 226, "message": "in executeTestCase"}, {"path": "..\\library\\MAndroid2BaseCommon.py", "lineno": 351, "message": "KeyError"}], "stdout": "{'VoiceCall': {'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestSteps': ['Place voice call.', 'Receive voice call.', 'Wait for call duraton.', 'End voice call.'], 'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.']}, 'SMS': {'TestCaseID': 'MAndroid2_Smoke_Test_002_SMS', 'Description': 'Basic SMS.', 'Preconditions': 'None.', 'TestSteps': ['Send SMS.', 'Wait for SMS duraton.', 'Receive SMS.'], 'CheckPoints': ['Send SMS successfully.', 'Receive SMS successfully.']}, 'MMS': {'TestCaseID': 'MAndroid2_Smoke_Test_003_MMS', 'Description': 'Basic MMS.', 'Preconditions': ['Get a file as MMS url by 1033 API.'], 'TestSteps': ['Unlock handset screen.', 'Wait for screen unlock.', 'Send MMS.', 'Wait for MMS duraton.', 'Receive MMS.'], 'CheckPoints': ['Unlock handset screen successfully.', 'Send MMS successfully.', 'Receive MMS successfully.']}, 'WebBrowsing': {'TestCaseID': 'MAndroid2_Smoke_Test_004_WebBrowsing', 'Description': 'Basic web browsing.', 'Preconditions': 'None.', 'TestSteps': ['Web Browsing.'], 'CheckPoints': ['Web browsing successfully.']}, 'HTTPDownload': {'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestSteps': ['Start HTTP download.', 'Wait for HTTP download completion.'], 'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.']}}\nRead test configuration yaml file ../configuration/testCaseInfo/testCaseInfo.yaml successfully.\n##########Calling REST API to get devices list on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/devices\n##########Calling REST API to release device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05\nresp.status_code is 200\n{'success': True, 'description': 'Device successfully removed'}\nHandset with IMSI 505025703492762 has been occupied by myself Peter.Zhang@matrium.com.au.\nFind the matched IMSI 505025703492762 on mcloud\n##########Calling REST API to use device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices\n{'success': True, 'description': 'Device successfully added'}\nAdding ce12160ccd1f323f05 to deviceSerialList\n##########Calling REST API to get the remote debug URL of the testing device ce12160ccd1f323f05 on MCloud.\nhttp://mcloud.matrium.com.au:7100/api/v1/user/devices/ce12160ccd1f323f05/remoteConnect\n{'success': True, 'remoteConnectUrl': 'mcloud.matrium.com.au:7433'}\nconnect 505025703492762 on mcloud successfully\nremoteConnectUrl is  mcloud.matrium.com.au:7433\nMO Handset ID is mcloud.matrium.com.au:7433\n{'isSuccess': True, 'startTime': 1592870101086, 'version': '2.20.41Build2020-06-09_14:00:07', 'description': 'MAndroid2 Version is: 2.20.41Build2020-06-09_14:00:07'}\n", "longrepr": "self = <test_MAndroid2TestCases.TestMAndroid2TestCases object at 0x000001745EC7B358>\njson_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironment)\n    @pytest.mark.parametrize(\"testParameters\", httpDownloadTestParameters)\n    def test_MAndroid2_HTTPDownload(self, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'HTTPDownload'\n        userFlag = 'MO'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n    \n        # Execute test case.\n>       testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters, testCaseInfo)\n\ntest_MAndroid2TestCases.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:226: in executeTestCase\n    responseList = executeTestLogic(testEnvironment, testCaseInfo, testCaseKey, testParameters)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240..., 'MAndroid2Plugin': '2.19.17Build2020-05-01_11:35:00'}}, 'MT': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}}}\ntestCaseInfo = {'CheckPoints': ['HTTP download successfully.', 'Downloaded file exists.'], 'Description': 'Basic HTTP download.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_005_HTTPDownload', ...}\ntestCaseKey = 'HTTPDownload'\ntestParameters = {'HTTPDownload': {'Duration': 10, 'downloadUrl': 'http://freeweb.siol.net/tehnika/test5M.dat'}}\n\n    def executeTestLogic(testEnvironment, testCaseInfo, testCaseKey, testParameters):\n    \n        # Variables initialization.\n        responseList = []\n    \n        # Test logic for voice call.\n        if (testCaseKey == 'VoiceCall'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Place voice call.'):\n                    placeVoiceCallResponse = placeBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testEnvironment['testUsers']['MT']['MSISDN'])\n                    response['placeVoiceCall'] = placeVoiceCallResponse\n                elif (testStep == 'Receive voice call.'):\n                    receiveVoiceCallResponse = receiveBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                            testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveVoiceCall'] = receiveVoiceCallResponse\n                elif (testStep == 'Wait for call duraton.'):\n                    if (testParameters['VoiceCall']['Duration'] > 0):\n                            sleep(testParameters['VoiceCall']['Duration'])\n                elif (testStep == 'End voice call.'):\n                    endVoiceCallResponse = endBasicVoiceCall(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MO']['handsetID'])\n                    response['endVoiceCall'] = endVoiceCallResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for SMS.\n        elif (testCaseKey == 'SMS'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Send SMS.'):\n                    sendSMSResponse = sendSMS(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testEnvironment['testUsers']['MT']['MSISDN'],\n                                                        testParameters['SMS']['smsBody'])\n                    response['sendSMS'] = sendSMSResponse\n                elif (testStep == 'Wait for SMS duraton.'):\n                    if (testParameters['SMS']['Duration'] > 0):\n                            sleep(testParameters['SMS']['Duration'])\n                elif (testStep == 'Receive SMS.'):\n                    receiveSMSResponse = receiveSMS(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveSMS'] = receiveSMSResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for MMS.\n        elif (testCaseKey == 'MMS'):\n    \n            testPreconditions = testCaseInfo['Preconditions']\n            for testPrecondition in testPreconditions:\n                response = {}\n                if (testPrecondition == 'Get a file as MMS url by 1033 API.'):\n                    mmsUrl = getMMSUrl(testEnvironment['MAndroid2AgentPath'],\n                              testEnvironment['testUsers']['MO']['handsetID'])\n    \n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Unlock handset screen.'):\n                    unlockHandsetScreenResponse = unlockHandsetScreen(testEnvironment['MAndroid2AgentPath'],\n                                              testEnvironment['testUsers']['MO']['handsetID'])\n                    response['unlockHandsetScreen'] = unlockHandsetScreenResponse\n                elif (testStep == 'Wait for screen unlock.'):\n                    if (testParameters['MMS']['ScreenUnlockDuration'] > 0):\n                            sleep(testParameters['MMS']['ScreenUnlockDuration'])\n                elif (testStep == 'Send MMS.'):\n                    sendMMSResponse = sendMMS(testEnvironment['MAndroid2AgentPath'],\n                                              testEnvironment['testUsers']['MO']['handsetID'],\n                                              testEnvironment['testUsers']['MT']['MSISDN'],\n                                              testParameters['MMS']['mmsBody'],\n                                              mmsUrl)\n                    response['sendMMS'] = sendMMSResponse\n                elif (testStep == 'Wait for MMS duraton.'):\n                    if (testParameters['MMS']['Duration'] > 0):\n                            sleep(testParameters['MMS']['Duration'])\n                elif (testStep == 'Receive MMS.'):\n                    receiveMMSResponse = receiveMMS(testEnvironment['MAndroid2AgentPath'],\n                                                    testEnvironment['testUsers']['MT']['handsetID'])\n                    response['receiveMMS'] = receiveMMSResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for web browsing.\n        elif (testCaseKey == 'WebBrowsing'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Web Browsing.'):\n                    webBrowsingResponse = webBrowsing(testEnvironment['MAndroid2AgentPath'],\n                                                        testEnvironment['testUsers']['MO']['handsetID'],\n                                                        testParameters['WebBrowsing']['webUrl'])\n                    response['webBrowsing'] = webBrowsingResponse\n                else:\n                    assert (\"Test step {} cannot be recognized in test case.\".format(testStep))\n    \n                responseList.append(response)\n        # Test logic for HTTP Download.\n        elif (testCaseKey == 'HTTPDownload'):\n            testSteps = testCaseInfo['TestSteps']\n            for testStep in testSteps:\n                response = {}\n                if (testStep == 'Start HTTP download.'):\n                    startHTTPDownloadResponse = startHTTPDownload(testEnvironment['MAndroid2AgentPath'],\n                                                                  testEnvironment['testUsers']['MO']['handsetID'],\n>                                                                 testParameters['WebBrowsing']['webUrl'])\nE                   KeyError: 'WebBrowsing'\n\n..\\library\\MAndroid2BaseCommon.py:351: KeyError"}, "teardown": {"duration": 0.153031587600708, "outcome": "passed", "stdout": "------ Teardown after class TestMAndroid2TestCases ------\ntestCaseDetailList is []\n"}}]}