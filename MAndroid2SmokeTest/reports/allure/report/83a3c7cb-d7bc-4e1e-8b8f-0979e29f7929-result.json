{"name": "test_MAndroid2_VoiceCall[testParameters0-testEnvironment4]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_MAndroid2AllDevices.TestMAndroid2TestCases object at 0x00000261E9DB3F60>\nrp_logger = <RPLogger MAndroid2SmokeTest.conftest (DEBUG)>, json_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}, 'MT': {'IMSI': '505025504563848', 'MSISDN': '+61431202671'}}}\ntestParameters = {'VoiceCall': {'Duration': 8}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironmentCombinations)\n    @pytest.mark.parametrize(\"testParameters\", voiceCallTestParameters)\n    def test_MAndroid2_VoiceCall(self, rp_logger, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'VoiceCall'\n        userFlag = 'MOMT'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n        rp_logger.info(\"Test case info: {}.\".format(testCaseInfo))\n        rp_logger.info(\"Test environment: {}.\".format(testEnvironment))\n        rp_logger.info(\"Test testParameters: {}.\".format(testParameters))\n    \n        # Execute test case.\n        rp_logger.info(\"Executing test logic.\")\n        testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters,\n>                                     testCaseInfo, self.testCaseSummary, self.testCaseDetailList)\n\ntest_MAndroid2AllDevices.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:319: in executeTestCase\n    connectTestUsers(testEnvironment, userFlag, testParameters, testCaseInfo, testCaseSummary, testCaseDetailList)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}, 'MT': {'IMSI': '505025504563848', 'MSISDN': '+61431202671'}}}\nuserFlag = 'MOMT', testParameters = {'VoiceCall': {'Duration': 8}}\ntestCaseInfo = {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.'], 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', ...}\ntestCaseSummary = {'MAndroid2AgentVersion': '2.19.33Build2020-03-27_04:28:38', 'fail': 14, 'pass': 2, 'sum': 16, ...}\ntestCaseDetailList = [{'CheckPoints': 'Place voice call successfully.\\nReceive voice call successfully.\\nEnd voice call successfully.', 'De... 'Basic voice call.', 'Preconditions': 'N\\no\\nn\\ne\\n.', 'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', ...}, ...]\n\n    def connectTestUsers(testEnvironment, userFlag, testParameters, testCaseInfo, testCaseSummary, testCaseDetailList):\n        # Connect available test handset on mcloud from specified IMSI.\n        result = {}\n        mcloud = MCloudControl()\n    \n        # Set test environment variables.\n        mcloud.mcloudBaseUrl = testEnvironment['MCloud']['baseUrl']\n        mcloud.mcloudLoginUser = testEnvironment['Login']['User']\n        mcloud.mcloudLoginToken = testEnvironment['Login']['accessToken']\n    \n        if (userFlag == \"MO\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MO']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MO']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n            assert (result[\"remoteConnectUrl\"] != None)\n            print(\"MO Handset ID is {}\".format(result[\"remoteConnectUrl\"]))\n    \n            # Get MAndroid2 version info.\n            version = getMAndroid2Version(testEnvironment['MAndroid2AgentPath'],\n                                          testEnvironment['testUsers']['MO']['handsetID'])\n            if version != None:\n                testEnvironment['testUsers']['MO']['versions'] = version\n            else:\n                failedReason = \"Cannot get MAndroid2 version from {}\".format(testEnvironment['testUsers']['MO']['handsetID'])\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            assert (version != None)\n        elif (userFlag == \"MT\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MT']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MT']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n            assert (result[\"remoteConnectUrl\"] != None)\n            print(\"MT Handset ID is {}\".format(result[\"remoteConnectUrl\"]))\n    \n            # Get MAndroid2 version info.\n            version = getMAndroid2Version(testEnvironment['MAndroid2AgentPath'],\n                                          testEnvironment['testUsers']['MT']['handsetID'])\n            if version != None:\n                testEnvironment['testUsers']['MT']['versions'] = version\n            else:\n                failedReason = \"Cannot get MAndroid2 version from {}\".format(testEnvironment['testUsers']['MT']['handsetID'])\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            assert (version != None)\n    \n        elif (userFlag == \"MOMT\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MO']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MO']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n>           assert (result[\"remoteConnectUrl\"] != None)\nE           AssertionError\n\n..\\library\\MAndroid2BaseCommon.py:198: AssertionError"}, "attachments": [{"name": "log", "source": "373f810e-a32e-4677-86c0-9c499f683d1e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "2363954e-f585-4907-84b7-0b9e858c8e76-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "testParameters", "value": "{'VoiceCall': {'Duration': 8}}"}, {"name": "testEnvironment", "value": "{'MCloud': {'baseUrl': 'http://mcloud.matrium.com.au:7100/api/v1'}, 'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e'}, 'MAndroid2AgentPath': 'c:/tmp/MatriumMAndroid2-release.jar', 'testUsers': {'MO': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}, 'MT': {'IMSI': '505025504563848', 'MSISDN': '+61431202671'}}}"}], "start": 1599296495839, "stop": 1599296496015, "uuid": "27a02ecb-e757-46d2-a456-c0e533ad26ab", "historyId": "f697e4ee590e0dadfab466f823afdc02", "testCaseId": "99b39bb68dade2c631227e786bcfdca2", "fullName": "testcases.test_MAndroid2AllDevices.TestMAndroid2TestCases#test_MAndroid2_VoiceCall", "labels": [{"name": "tag", "value": "allAvailableDeviceSmokeTest"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_MAndroid2AllDevices"}, {"name": "subSuite", "value": "TestMAndroid2TestCases"}, {"name": "host", "value": "Peter-Zhang"}, {"name": "thread", "value": "50656-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_MAndroid2AllDevices"}]}