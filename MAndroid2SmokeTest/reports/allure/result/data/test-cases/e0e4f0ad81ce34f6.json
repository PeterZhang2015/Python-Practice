{
  "uid" : "e0e4f0ad81ce34f6",
  "name" : "test_MAndroid2_VoiceCall[testParameters0-testEnvironment2]",
  "fullName" : "testcases.test_MAndroid2AllDevices.TestMAndroid2TestCases#test_MAndroid2_VoiceCall",
  "historyId" : "d16a882511c00f494ce4b8adeb528c62",
  "time" : {
    "start" : 1599276156485,
    "stop" : 1599276217289,
    "duration" : 60804
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'failed' == 'passed'\n  - failed\n  + passed",
  "statusTrace" : "self = <test_MAndroid2AllDevices.TestMAndroid2TestCases object at 0x0000018F723E80F0>\nrp_logger = <RPLogger MAndroid2SmokeTest.conftest (DEBUG)>\njson_metadata = {'testCaseInfo': {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice cal...mmand': 'java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7453 3012', 'failedReason': 'none', ...}]}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...4:00:07', 'MAndroid2Agent': '2.19.33Build2020-03-27_04:28:38', 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}}}\ntestParameters = {'VoiceCall': {'Duration': 8}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironmentCombinations)\n    @pytest.mark.parametrize(\"testParameters\", voiceCallTestParameters)\n    def test_MAndroid2_VoiceCall(self, rp_logger, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'VoiceCall'\n        userFlag = 'MOMT'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n        rp_logger.info(\"Test case info: {}.\".format(testCaseInfo))\n        rp_logger.info(\"Test environment: {}.\".format(testEnvironment))\n        rp_logger.info(\"Test testParameters: {}.\".format(testParameters))\n    \n        # Execute test case.\n        rp_logger.info(\"Executing test logic.\")\n        testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters,\n                                      testCaseInfo, self.testCaseSummary, self.testCaseDetailList)\n    \n        # Write test case summary and test case detail.\n        writeExcelTestReportSummary(self.testCaseSummary, testResults, testEnvironment)\n        writeExcelTestReportDetail(self.testCaseDetailList, testEnvironment, testParameters,\n                                                             testCaseInfo, testResults)\n    \n        # Assert test result.\n        rp_logger.info(\"Test result: {}.\".format(testResults))\n        for result in testResults:\n>           assert (result['checkPointResult'] == \"passed\")\nE           AssertionError: assert 'failed' == 'passed'\nE             - failed\nE             + passed\n\ntest_MAndroid2AllDevices.py:170: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "json_metadata",
    "time" : {
      "start" : 1599276156484,
      "stop" : 1599276156484,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "rp_logger",
    "time" : {
      "start" : 1599276047049,
      "stop" : 1599276047049,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1599276047049,
      "stop" : 1599276047050,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 'failed' == 'passed'\n  - failed\n  + passed",
    "statusTrace" : "self = <test_MAndroid2AllDevices.TestMAndroid2TestCases object at 0x0000018F723E80F0>\nrp_logger = <RPLogger MAndroid2SmokeTest.conftest (DEBUG)>\njson_metadata = {'testCaseInfo': {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice cal...mmand': 'java -jar c:/tmp/MatriumMAndroid2-release.jar mcloud.matrium.com.au:7453 3012', 'failedReason': 'none', ...}]}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...4:00:07', 'MAndroid2Agent': '2.19.33Build2020-03-27_04:28:38', 'MAndroid2Plugin': '2.19.16Build2019-10-24_15:57:51'}}}}\ntestParameters = {'VoiceCall': {'Duration': 8}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironmentCombinations)\n    @pytest.mark.parametrize(\"testParameters\", voiceCallTestParameters)\n    def test_MAndroid2_VoiceCall(self, rp_logger, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'VoiceCall'\n        userFlag = 'MOMT'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n        rp_logger.info(\"Test case info: {}.\".format(testCaseInfo))\n        rp_logger.info(\"Test environment: {}.\".format(testEnvironment))\n        rp_logger.info(\"Test testParameters: {}.\".format(testParameters))\n    \n        # Execute test case.\n        rp_logger.info(\"Executing test logic.\")\n        testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters,\n                                      testCaseInfo, self.testCaseSummary, self.testCaseDetailList)\n    \n        # Write test case summary and test case detail.\n        writeExcelTestReportSummary(self.testCaseSummary, testResults, testEnvironment)\n        writeExcelTestReportDetail(self.testCaseDetailList, testEnvironment, testParameters,\n                                                             testCaseInfo, testResults)\n    \n        # Assert test result.\n        rp_logger.info(\"Test result: {}.\".format(testResults))\n        for result in testResults:\n>           assert (result['checkPointResult'] == \"passed\")\nE           AssertionError: assert 'failed' == 'passed'\nE             - failed\nE             + passed\n\ntest_MAndroid2AllDevices.py:170: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f310939e7b1332e5",
      "name" : "log",
      "source" : "f310939e7b1332e5.txt",
      "type" : "text/plain",
      "size" : 9355
    }, {
      "uid" : "e2c0bc09d565c7a2",
      "name" : "stdout",
      "source" : "e2c0bc09d565c7a2.txt",
      "type" : "text/plain",
      "size" : 9565
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1599277587555,
      "stop" : 1599277587627,
      "duration" : 72
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "allAvailableDeviceSmokeTest"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "test_MAndroid2AllDevices"
  }, {
    "name" : "subSuite",
    "value" : "TestMAndroid2TestCases"
  }, {
    "name" : "host",
    "value" : "Peter-Zhang"
  }, {
    "name" : "thread",
    "value" : "11348-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_MAndroid2AllDevices"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "testEnvironment",
    "value" : "{'MCloud': {'baseUrl': 'http://mcloud.matrium.com.au:7100/api/v1'}, 'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e'}, 'MAndroid2AgentPath': 'c:/tmp/MatriumMAndroid2-release.jar', 'testUsers': {'MO': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025504563848', 'MSISDN': '+61431202671'}}}"
  }, {
    "name" : "testParameters",
    "value" : "{'VoiceCall': {'Duration': 8}}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "allAvailableDeviceSmokeTest" ]
  },
  "source" : "e0e4f0ad81ce34f6.json",
  "parameterValues" : [ "{'MCloud': {'baseUrl': 'http://mcloud.matrium.com.au:7100/api/v1'}, 'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e'}, 'MAndroid2AgentPath': 'c:/tmp/MatriumMAndroid2-release.jar', 'testUsers': {'MO': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025504563848', 'MSISDN': '+61431202671'}}}", "{'VoiceCall': {'Duration': 8}}" ]
}