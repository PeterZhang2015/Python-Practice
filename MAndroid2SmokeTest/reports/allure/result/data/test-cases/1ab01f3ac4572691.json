{
  "uid" : "1ab01f3ac4572691",
  "name" : "test_MAndroid2_VoiceCall[testParameters0-testEnvironment3]",
  "fullName" : "testcases.test_MAndroid2AllDevices.TestMAndroid2TestCases#test_MAndroid2_VoiceCall",
  "historyId" : "869b53ed9b0262e56222be3201b10933",
  "time" : {
    "start" : 1599296487756,
    "stop" : 1599296487948,
    "duration" : 192
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_MAndroid2AllDevices.TestMAndroid2TestCases object at 0x00000261E9D50DD8>\nrp_logger = <RPLogger MAndroid2SmokeTest.conftest (DEBUG)>, json_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'VoiceCall': {'Duration': 8}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironmentCombinations)\n    @pytest.mark.parametrize(\"testParameters\", voiceCallTestParameters)\n    def test_MAndroid2_VoiceCall(self, rp_logger, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'VoiceCall'\n        userFlag = 'MOMT'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n        rp_logger.info(\"Test case info: {}.\".format(testCaseInfo))\n        rp_logger.info(\"Test environment: {}.\".format(testEnvironment))\n        rp_logger.info(\"Test testParameters: {}.\".format(testParameters))\n    \n        # Execute test case.\n        rp_logger.info(\"Executing test logic.\")\n        testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters,\n>                                     testCaseInfo, self.testCaseSummary, self.testCaseDetailList)\n\ntest_MAndroid2AllDevices.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:319: in executeTestCase\n    connectTestUsers(testEnvironment, userFlag, testParameters, testCaseInfo, testCaseSummary, testCaseDetailList)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\nuserFlag = 'MOMT', testParameters = {'VoiceCall': {'Duration': 8}}\ntestCaseInfo = {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.'], 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', ...}\ntestCaseSummary = {'MAndroid2AgentVersion': '2.19.33Build2020-03-27_04:28:38', 'fail': 7, 'pass': 2, 'sum': 9, ...}\ntestCaseDetailList = [{'CheckPoints': 'Place voice call successfully.\\nReceive voice call successfully.\\nEnd voice call successfully.', 'De... 'Basic voice call.', 'Preconditions': 'N\\no\\nn\\ne\\n.', 'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', ...}, ...]\n\n    def connectTestUsers(testEnvironment, userFlag, testParameters, testCaseInfo, testCaseSummary, testCaseDetailList):\n        # Connect available test handset on mcloud from specified IMSI.\n        result = {}\n        mcloud = MCloudControl()\n    \n        # Set test environment variables.\n        mcloud.mcloudBaseUrl = testEnvironment['MCloud']['baseUrl']\n        mcloud.mcloudLoginUser = testEnvironment['Login']['User']\n        mcloud.mcloudLoginToken = testEnvironment['Login']['accessToken']\n    \n        if (userFlag == \"MO\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MO']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MO']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n            assert (result[\"remoteConnectUrl\"] != None)\n            print(\"MO Handset ID is {}\".format(result[\"remoteConnectUrl\"]))\n    \n            # Get MAndroid2 version info.\n            version = getMAndroid2Version(testEnvironment['MAndroid2AgentPath'],\n                                          testEnvironment['testUsers']['MO']['handsetID'])\n            if version != None:\n                testEnvironment['testUsers']['MO']['versions'] = version\n            else:\n                failedReason = \"Cannot get MAndroid2 version from {}\".format(testEnvironment['testUsers']['MO']['handsetID'])\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            assert (version != None)\n        elif (userFlag == \"MT\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MT']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MT']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n            assert (result[\"remoteConnectUrl\"] != None)\n            print(\"MT Handset ID is {}\".format(result[\"remoteConnectUrl\"]))\n    \n            # Get MAndroid2 version info.\n            version = getMAndroid2Version(testEnvironment['MAndroid2AgentPath'],\n                                          testEnvironment['testUsers']['MT']['handsetID'])\n            if version != None:\n                testEnvironment['testUsers']['MT']['versions'] = version\n            else:\n                failedReason = \"Cannot get MAndroid2 version from {}\".format(testEnvironment['testUsers']['MT']['handsetID'])\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            assert (version != None)\n    \n        elif (userFlag == \"MOMT\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MO']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MO']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n>           assert (result[\"remoteConnectUrl\"] != None)\nE           AssertionError\n\n..\\library\\MAndroid2BaseCommon.py:198: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "rp_logger",
    "time" : {
      "start" : 1599296371932,
      "stop" : 1599296371933,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1599296371933,
      "stop" : 1599296371934,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "json_metadata",
    "time" : {
      "start" : 1599296487755,
      "stop" : 1599296487755,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_MAndroid2AllDevices.TestMAndroid2TestCases object at 0x00000261E9D50DD8>\nrp_logger = <RPLogger MAndroid2SmokeTest.conftest (DEBUG)>, json_metadata = {}\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\ntestParameters = {'VoiceCall': {'Duration': 8}}\n\n    @pytest.mark.parametrize(\"testEnvironment\", testEnvironmentCombinations)\n    @pytest.mark.parametrize(\"testParameters\", voiceCallTestParameters)\n    def test_MAndroid2_VoiceCall(self, rp_logger, json_metadata, testEnvironment, testParameters):\n        # Define test case variables.\n        testCaseKey = 'VoiceCall'\n        userFlag = 'MOMT'\n    \n        # Get and check test case info.\n        testCaseInfo = checkTestCaseInfoConfig(testCaseKey)\n        rp_logger.info(\"Test case info: {}.\".format(testCaseInfo))\n        rp_logger.info(\"Test environment: {}.\".format(testEnvironment))\n        rp_logger.info(\"Test testParameters: {}.\".format(testParameters))\n    \n        # Execute test case.\n        rp_logger.info(\"Executing test logic.\")\n        testResults = executeTestCase(testCaseKey, userFlag, json_metadata, testEnvironment, testParameters,\n>                                     testCaseInfo, self.testCaseSummary, self.testCaseDetailList)\n\ntest_MAndroid2AllDevices.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\library\\MAndroid2BaseCommon.py:319: in executeTestCase\n    connectTestUsers(testEnvironment, userFlag, testParameters, testCaseInfo, testCaseSummary, testCaseDetailList)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntestEnvironment = {'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab1240...': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}\nuserFlag = 'MOMT', testParameters = {'VoiceCall': {'Duration': 8}}\ntestCaseInfo = {'CheckPoints': ['Place voice call successfully.', 'Receive voice call successfully.', 'End voice call successfully.'], 'Description': 'Basic voice call.', 'Preconditions': 'None.', 'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', ...}\ntestCaseSummary = {'MAndroid2AgentVersion': '2.19.33Build2020-03-27_04:28:38', 'fail': 7, 'pass': 2, 'sum': 9, ...}\ntestCaseDetailList = [{'CheckPoints': 'Place voice call successfully.\\nReceive voice call successfully.\\nEnd voice call successfully.', 'De... 'Basic voice call.', 'Preconditions': 'N\\no\\nn\\ne\\n.', 'TestCaseID': 'MAndroid2_Smoke_Test_001_Voice_Call', ...}, ...]\n\n    def connectTestUsers(testEnvironment, userFlag, testParameters, testCaseInfo, testCaseSummary, testCaseDetailList):\n        # Connect available test handset on mcloud from specified IMSI.\n        result = {}\n        mcloud = MCloudControl()\n    \n        # Set test environment variables.\n        mcloud.mcloudBaseUrl = testEnvironment['MCloud']['baseUrl']\n        mcloud.mcloudLoginUser = testEnvironment['Login']['User']\n        mcloud.mcloudLoginToken = testEnvironment['Login']['accessToken']\n    \n        if (userFlag == \"MO\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MO']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MO']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n            assert (result[\"remoteConnectUrl\"] != None)\n            print(\"MO Handset ID is {}\".format(result[\"remoteConnectUrl\"]))\n    \n            # Get MAndroid2 version info.\n            version = getMAndroid2Version(testEnvironment['MAndroid2AgentPath'],\n                                          testEnvironment['testUsers']['MO']['handsetID'])\n            if version != None:\n                testEnvironment['testUsers']['MO']['versions'] = version\n            else:\n                failedReason = \"Cannot get MAndroid2 version from {}\".format(testEnvironment['testUsers']['MO']['handsetID'])\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            assert (version != None)\n        elif (userFlag == \"MT\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MT']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MT']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n            assert (result[\"remoteConnectUrl\"] != None)\n            print(\"MT Handset ID is {}\".format(result[\"remoteConnectUrl\"]))\n    \n            # Get MAndroid2 version info.\n            version = getMAndroid2Version(testEnvironment['MAndroid2AgentPath'],\n                                          testEnvironment['testUsers']['MT']['handsetID'])\n            if version != None:\n                testEnvironment['testUsers']['MT']['versions'] = version\n            else:\n                failedReason = \"Cannot get MAndroid2 version from {}\".format(testEnvironment['testUsers']['MT']['handsetID'])\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            assert (version != None)\n    \n        elif (userFlag == \"MOMT\"):\n            result = mcloud.connectToMcloudUser(testEnvironment['testUsers']['MO']['IMSI'])\n    \n            if result[\"failedFlag\"] == True or result[\"remoteConnectUrl\"] == None:\n                failedReason = result[\"failedReason\"]\n                writeExcelFailedTestReport(failedReason, testCaseSummary, testCaseDetailList, testEnvironment,\n                                           testParameters, testCaseInfo)\n            else:\n                testEnvironment['testUsers']['MO']['handsetID'] = result[\"remoteConnectUrl\"]\n    \n>           assert (result[\"remoteConnectUrl\"] != None)\nE           AssertionError\n\n..\\library\\MAndroid2BaseCommon.py:198: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6061b341e5448903",
      "name" : "log",
      "source" : "6061b341e5448903.txt",
      "type" : "text/plain",
      "size" : 2760
    }, {
      "uid" : "c2cee1c260cdbf35",
      "name" : "stdout",
      "source" : "c2cee1c260cdbf35.txt",
      "type" : "text/plain",
      "size" : 3020
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1599297676473,
      "stop" : 1599297676552,
      "duration" : 79
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "allAvailableDeviceSmokeTest"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "test_MAndroid2AllDevices"
  }, {
    "name" : "subSuite",
    "value" : "TestMAndroid2TestCases"
  }, {
    "name" : "host",
    "value" : "Peter-Zhang"
  }, {
    "name" : "thread",
    "value" : "50656-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_MAndroid2AllDevices"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "testEnvironment",
    "value" : "{'MCloud': {'baseUrl': 'http://mcloud.matrium.com.au:7100/api/v1'}, 'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e'}, 'MAndroid2AgentPath': 'c:/tmp/MatriumMAndroid2-release.jar', 'testUsers': {'MO': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}"
  }, {
    "name" : "testParameters",
    "value" : "{'VoiceCall': {'Duration': 8}}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "allAvailableDeviceSmokeTest" ]
  },
  "source" : "1ab01f3ac4572691.json",
  "parameterValues" : [ "{'MCloud': {'baseUrl': 'http://mcloud.matrium.com.au:7100/api/v1'}, 'Login': {'User': 'Peter.Zhang@matrium.com.au', 'accessToken': 'Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e'}, 'MAndroid2AgentPath': 'c:/tmp/MatriumMAndroid2-release.jar', 'testUsers': {'MO': {'IMSI': '505025104559746', 'MSISDN': '+61418673947'}, 'MT': {'IMSI': '505025703492762', 'MSISDN': '+61402537622'}}}", "{'VoiceCall': {'Duration': 8}}" ]
}